#!/usr/bin/env bash

source "./lib/scripts"
source "./lib/variables"

ignores_global=(
  README.md
  usr
)

shared_configs_dir="$configs_dir/shared"
shared_config_ignores+=(
  "${ignores_global[@]}"
  Code
  gitignore_global
  idea.properties
  oh-my-zsh
)

mac_configs_dir="$configs_dir/mac"
mac_configs_ignores+=(
  "${shared_config_ignores[@]}"
  karabiner
  defaults
  override
)

windows_configs_dir="$configs_dir/windows"
windows_configs_ignores+=(
  "${shared_config_ignores[@]}"
  AppData
)

setEnv() {
  case "$(uname -s)" in
  CYGWIN*)
    export CYGWIN=winsymlinks:native
    ;;
  esac
}

setEnv

linkDotFilesForOs() {
  echo "Link OS independent dotfiles"
  linkSharedFiles $link

  local uname
  uname=$(uname)

  # TODO: WSL detection does not work in sudo
  if [[ "$uname" == "CYGWIN"* ]] || [[ -n "$WSL_DISTRO_NAME" ]]; then
    echo "Cygwin/WSL based environment detected"
    linkWindowFiles $link
    return
  fi

  if [[ "$uname" == "Darwin"* ]]; then
    echo "Darwin based environment detected"
    linkMacFiles $link
  fi

  echo "No environment matched"
}

linkSharedFiles() {
  local mode=$1
  linkDotFiles "$mode" "$shared_configs_dir" "$target" "shared_config_ignores"
  linkFilesInDir "$mode" "$shared_configs_dir/usr/local/bin" "/usr/local/bin"

  mkdir -p "$target/.oh-my-zsh/custom"
  linkFilesInDir "$mode" "$shared_configs_dir/oh-my-zsh/custom" "$target/.oh-my-zsh/custom"

  mkdir -p "$target/.config/git"
  linkFile "$mode" "$shared_configs_dir/gitignore_global" "$target/.config/git/ignore"

  linkFile "$mode" "$shared_configs_dir/idea.properties" "$target/idea.properties"
}

linkWindowFiles() {
  local mode=$1
  linkDotFiles "$mode" "$windows_configs_dir" "$target" "windows_configs_ignores"
  linkFilesInDir "$mode" "$windows_configs_dir/usr/local/bin" "/usr/local/bin"

  # Custom links
  linkFile "$mode" "$shared_configs_dir/Code" "$target/AppData/Roaming/Code"
  linkFile "$mode" "$windows_configs_dir/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/settings.json" "$target/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json"
}

linkMacFiles() {
  local mode=$1
  linkDotFiles "$mode" "$mac_configs_dir" "$target" "mac_configs_ignores"
  linkFilesInDir "$mode" "$mac_configs_dir/usr/local/bin" "/usr/local/bin"

  # Custom links
  linkFile "$mode" "$mac_configs_dir/karabiner" "$target/.config/karabiner"
  linkFile "$mode" "$shared_configs_dir/Code" "$target/Library/Application Support/Code"

  mkdir -p "$target/.config/nvim"
  linkFile "$mode" "$shared_configs_dir/vimrc" "$target/.config/nvim/init.vim"

  mkdir -p "$target/Library/Keyboard Layouts"
  linkFile "$mode" "$mac_configs_dir/layout.keylayout" "$target/Library/Keyboard Layouts/layout.keylayout"
}

clean() {
  echo "Clean OS independent dotfiles"
  linkDotFiles $clean "$shared_configs_dir" "$target" "shared_config_ignores"

  case "$(uname -s)" in
  Darwin)
    echo "Darwin based environment detected"
    linkMacFiles $clean
    ;;
  CYGWIN*)
    echo "Cygwin based environment detected"
    linkWindowFiles $clean
    ;;
  *)
    echo "No environment matched"
    ;;
  esac
}

help() {
  cat <<-EOF
Usage: linker [COMMAND]
Commands:
ln      Link dotfiles based on OS, will replace existing symlinks
clean   clean symlinks based on OS

Additional Commands:
ls      Link only shared dotfiles
lm      Link only Mac dotfiles
lw      Link only Windows dotfiles
EOF
}

process() {
  case "$1" in
  "ln")
    linkDotFilesForOs
    ;;
  "ls")
    linkSharedFiles $link
    ;;
  "lm")
    linkMacFiles
    ;;
  "lw")
    linkWindowFiles $link
    ;;
  "clean")
    clean
    ;;
  "help")
    help
    ;;
  *)
    printf "Not a valid command\\n\\n"
    help
    ;;
  esac
}

process "$@"
