#!/usr/bin/env bash

# cd to the directory that script is being executed and set configs_dir to directory
configs_dir=$( cd "$(dirname "$0")" || exit ; pwd )
target="$configs_dir/.."
ignores_global=(README.md)

shared_configs_dir="$configs_dir/shared"
shared_config_ignores+=(
  "${ignores_global[@]}"
)

mac_configs_dir="$configs_dir/mac"
mac_configs_ignores+=(
  "${shared_config_ignores[@]}"
  Karabiner
  defaults
  override
)

windows_configs_dir="$configs_dir/windows"
window_configs_ignores+=(
  "${shared_config_ignores[@]}"
)

setEnv(){
  case "$(uname -s)" in
    CYGWIN*)
      export CYGWIN=winsymlinks:native
  esac
}

setEnv

ignored() {
  # TODO: consider string expanding the final parameter when invoking
  # linkDotFiles and using ${@:3} to get remaining arguments instead of using a
  # indirect reference see: http://stackoverflow.com/a/11180835
  local elements="${2}[@]"
  for e in ${!elements}; do
    # If the element matches the 1st arg
    if [[ "$e" == "$1" ]]; then
      return 1; #true, ignored
    fi
  done
  return 0 #false, not ignored
}

link="link"
clean="clean"

linkDotFiles(){
  local mode=$1
  local configs_dir=$2
  local ignores_local=$3

  # TODO: consider using find with while loop
  # For each file in the configs_dir
  for file in "$configs_dir"/*; do
    # Get the filename by removing everything before the last '/'
    # see: http://stackoverflow.com/a/9011264
    local file=${file##*/}
    # Check if the file is in list of ignores
    ignored "$file" "$ignores_local"

    # If the file is ignored
    # Note: ($? gets the exit status of the previous command)
    if [ $? -eq 1 ]; then
      # Skip it
      continue
    fi

    if [ "$mode" = $clean ]; then
      # If the link does not exits
      if [[ ! -L "$target/.$file" ]]; then
        printf "Skipping: %s/.%s as it is not a symlink\n" "$target" "$file"
        continue
      fi

      printf "%s/.%s removed\n" "$target" "$file"
      rm "$target/.$file"
    fi

    if [ "$mode" = $link ]; then

      if [[ -L "$target/.$file" ]]; then
        rm "$target/.$file"
        ln -s "$configs_dir/$file" "$target/.$file"
        printf "Relinked: %s/%s => %s/.%s\n" "$configs_dir" "$file" "$target" "$file"
        continue
      fi

      if [[ -f "$target/.$file" || -d "$target/.$file" ]]; then
        printf "Skipping: %s/.%s as there is already a file our folder there\n" "$target" "$file"
        continue
      fi

      ln -s "$configs_dir/$file" "$target/.$file"
      printf "%s/%s => %s/.%s\n" "$configs_dir" "$file" "$target" "$file"
    fi
  done
}

linkFile(){
  local mode=$1
  local src=$2
  local dest=$3

  if [ "$mode" = $clean ]; then
    if [[ ! -L "$dest" ]]; then
      printf "Skipping: %s as it is not a symlink\n" "$dest"
      return
    fi

    printf "%s removed\n" "$dest"
    rm "$dest"
  fi

  if [ "$mode" = $link ]; then
    if [[ -L "$dest" ]]; then
      rm "$dest"
      ln -s "$src" "$dest"
      printf "Relinked: %s => %s\n" "$src" "$dest"
      return
    fi

    if [[ -f "$dest" || -d "$dest" ]]; then
      printf "Skipping: %s as there is already a file our folder there\n" "$dest"
      return
    fi

    ln -s "$src" "$dest"
    printf "%s => %s\n" "$src" "$dest"
  fi
}

linkDotFilesForOs() {
  echo "Link OS independent dotfiles"
  linkSharedFiles $link
  case "$(uname -s)" in
    Darwin)
      echo "Darwin based environment detected"
      linkMacFiles $link;;
    CYGWIN*)
      echo "Cygwin based environment detected"
      linkWindowFiles $link;;
    *)
      echo "No environment matched";;
  esac
}

setIntelliJConfig() {
  case "$(uname -s)" in
    "Darwin")
      echo idea.config.path=~/.IntelliJIdea/config >> "/Applications/IntelliJ IDEA.app/Contents/bin/idea.properties";;
    "CYGWIN*")
      echo idea.config.path=~/.IntelliJIdea/config >> "C:/Program Files (x86)/JetBrains/IntelliJ IDEA 2016.1/bin/idea.properties";;
  esac
}

linkSharedFiles() {
  local mode=$1
  linkDotFiles "$mode" "$shared_configs_dir" "shared_config_ignores"
}

linkWindowFiles() {
  local mode=$1
  linkDotFiles "$mode" "$windows_configs_dir" "ignores_global"
}

linkMacFiles() {
  local mode=$1
  linkDotFiles "$mode" "$mac_configs_dir" "mac_configs_ignores"
  linkFile "$mode" "$mac_configs_dir/Karabiner/private.xml" "$target/Library/Application Support/Karabiner/private.xml"
}

linkNVim() {
  linkFile $link "$shared_configs_dir/vimrc" "$target/.config/nvim/init.vim"
  linkFile $link "$shared_configs_dir/vimrc.bundles" "$target/.config/nvim/vimrc.bundles"
  linkFile $link "$mac_configs_dir/vimrc.bundles.oss" "$target/.config/nvim/vimrc.bundles.oss"
}

clean(){
  linkDotFiles $clean "$shared_configs_dir" "shared_config_ignores"
  case "$(uname -s)" in
    Darwin)
      linkMacFiles $clean;;
    CYGWIN*)
      linkWindowFiles $clean;;
  esac
}

help(){
cat <<-EOF
  Usage: linker [COMMAND]
  Commands:
  ln      Link dotfiles based on OS, will replace existing symlinks
  clean   clean symlinks based on OS

  Additional Commands:
  ls      Link only shared dotfiles
  lm      Link only Mac dotfiles
  lw      Link only Windows dotfiles
  si      Set IntelliJ config directory to ~/.IntelliJIdea based on OS
EOF
}

process(){
  case "$1" in
    "ln")
      linkDotFilesForOs;;
    "si")
      setIntelliJConfig;;
    "ls")
      linkSharedFiles $link;;
    "lm")
      linkMacFiles;;
    "lw")
      linkWindowFiles $link;;
    "clean")
      clean;;
    "help")
      help;;
    *)
      echo "Not a valid command"
      help;;
  esac
}

process "$@"
