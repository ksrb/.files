#!/usr/bin/env bash

source "./lib/variables"

ignores_global=(
  README.md
  usr
)

shared_configs_dir="$configs_dir/shared"
shared_config_ignores+=(
  "${ignores_global[@]}"
  Code
  gitignore_global
  idea.properties
  oh-my-zsh
)

mac_configs_dir="$configs_dir/mac"
mac_configs_ignores+=(
  "${shared_config_ignores[@]}"
  karabiner
  defaults
  override
)

windows_configs_dir="$configs_dir/windows"
windows_configs_ignores+=(
  "${shared_config_ignores[@]}"
)

setEnv() {
  case "$(uname -s)" in
  CYGWIN*)
    export CYGWIN=winsymlinks:native
    ;;
  esac
}

setEnv

ignored() {
  # TODO: consider string expanding the final parameter when invoking
  # linkDotFiles and using ${@:3} to get remaining arguments instead of using a
  # indirect reference see: http://stackoverflow.com/a/11180835
  local elements="${2}[@]"
  for e in ${!elements}; do
    # If the element matches the 1st arg
    if [[ "$e" == "$1" ]]; then
      return 1 #true, ignored
    fi
  done
  return 0 #false, not ignored
}

link="link"
clean="clean"

linkFile() {
  local mode=$1
  local src=$2
  local dest=$3

  if [ "$mode" = $clean ]; then
    # Not a symlink
    if [[ ! -L "$dest" ]]; then
      printf "Skipping: %s as it is not a symlink\\n" "$dest"
      return
    fi

    printf "%s removed\\n" "$dest"
    rm "$dest"
  fi

  if [ "$mode" = $link ]; then
    # If destination is a symlink
    if [[ -L "$dest" ]]; then
      # Override it
      rm "$dest"
      ln -s "$src" "$dest"
      printf "Overriding: %s => %s\\n" "$src" "$dest"
      return
    fi

    if [[ -f "$dest" || -d "$dest" ]]; then
      printf "Skipping: %s as there is already a file our folder there\\n" "$dest"
      return
    fi

    ln -s "$src" "$dest"
    printf "Linking: %s => %s\\n" "$src" "$dest"
  fi
}

linkDotFiles() {
  local mode=$1
  local configs_dir=$2
  local ignores_local=$3

  # TODO: consider using find with while loop
  # For each file in the configs_dir
  for file in "$configs_dir"/*; do
    # Get the filename by removing everything before the last '/'
    # see: http://stackoverflow.com/a/9011264
    local file=${file##*/}

    # Check if the file is in list of ignores
    ignored "$file" "$ignores_local"

    # If the file is ignored
    # Note: ($? gets the exit status of the previous command)
    if [ $? -eq 1 ]; then
      # Skip it
      continue
    fi

    linkFile "$mode" "$configs_dir/$file" "$target/.$file"
  done
}

linkDotFilesForOs() {
  echo "Link OS independent dotfiles"
  linkSharedFiles $link

  local uname=$(uname)

  # TODO: WSL detection does not work in sudo
  if [[ "$uname" == "CYGWIN"* ]] || [[ -n "$WSL_DISTRO_NAME" ]]; then
    echo "Cygwin/WSL based environment detected"
    linkWindowFiles $link
    return
  fi

  if [[ "$uname" == "Darwin"* ]]; then
    echo "Darwin based environment detected"
    linkMacFiles $link
  fi

  echo "No environment matched"
}

linkFilesInDir() {
  local mode=$1
  local dir=$2
  local dest=$3

  for file in "$dir"/*; do
    linkFile "$mode" "$file" "$dest/${file##*/}"
  done
}

linkSharedFiles() {
  local mode=$1
  linkDotFiles "$mode" "$shared_configs_dir" "shared_config_ignores"
  linkFilesInDir "$mode" "$shared_configs_dir/usr/local/bin" "/usr/local/bin"

  mkdir -p "$target/.oh-my-zsh/custom"
  linkFilesInDir "$mode" "$shared_configs_dir/oh-my-zsh/custom" "$target/.oh-my-zsh/custom"

  mkdir -p "$target/.config/git"
  linkFile "$mode" "$shared_configs_dir/gitignore_global" "$target/.config/git/ignore"

  linkFile "$mode" "$shared_configs_dir/idea.properties" "$target/idea.properties"
}

linkWindowFiles() {
  local mode=$1
  linkDotFiles "$mode" "$windows_configs_dir" "windows_configs_ignores"
  linkFilesInDir "$mode" "$windows_configs_dir/usr/local/bin" "/usr/local/bin"

  # Custom links
  linkFile "$mode" "$shared_configs_dir/Code" "$target/AppData/Roaming/Code"
  linkFile "$mode" "$windows_configs_dir/settings.json" "$target/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json"
}

linkMacFiles() {
  local mode=$1
  linkDotFiles "$mode" "$mac_configs_dir" "mac_configs_ignores"

  # Custom links
  linkFile "$mode" "$mac_configs_dir/karabiner" "$target/.config/karabiner"
  linkFile "$mode" "$shared_configs_dir/Code" "$target/Library/Application Support/Code"

  mkdir -p "$target/.config/nvim"
  linkFile "$mode" "$shared_configs_dir/vimrc" "$target/.config/nvim/init.vim"

  mkdir -p "$target/Library/Keyboard Layouts"
  linkFile "$mode" "$mac_configs_dir/layout.keylayout" "$target/Library/Keyboard Layouts/layout.keylayout"
}

clean() {
  echo "Clean OS independent dotfiles"
  linkDotFiles $clean "$shared_configs_dir" "shared_config_ignores"

  case "$(uname -s)" in
  Darwin)
    echo "Darwin based environment detected"
    linkMacFiles $clean
    ;;
  CYGWIN*)
    echo "Cygwin based environment detected"
    linkWindowFiles $clean
    ;;
  *)
    echo "No environment matched"
    ;;
  esac
}

help() {
  cat <<-EOF
Usage: linker [COMMAND]
Commands:
ln      Link dotfiles based on OS, will replace existing symlinks
clean   clean symlinks based on OS

Additional Commands:
ls      Link only shared dotfiles
lm      Link only Mac dotfiles
lw      Link only Windows dotfiles
EOF
}

process() {
  case "$1" in
  "ln")
    linkDotFilesForOs
    ;;
  "ls")
    linkSharedFiles $link
    ;;
  "lm")
    linkMacFiles
    ;;
  "lw")
    linkWindowFiles $link
    ;;
  "clean")
    clean
    ;;
  "help")
    help
    ;;
  *)
    printf "Not a valid command\\n\\n"
    help
    ;;
  esac
}

process "$@"
