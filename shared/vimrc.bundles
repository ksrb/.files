call plug#begin('~/.vim/plugged')

" File Utils
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'kien/ctrlp.vim'

" Syntax highlight
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'yamaya/vim-swift'

" GUI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'chriskempson/base16-vim'
Plug 'bufkill.vim'
Plug 'christoomey/vim-tmux-navigator'

" Git integration
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Source Utils
if !has("win32unix") " if not cygwin
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer --clang-completer' }
endif
Plug 'SirVer/ultisnips'
Plug 'ksrb/vim-javascript-es6-snippets'
Plug 'marijnh/tern_for_vim', { 'do' : 'npm install' }
Plug 'majutsushi/tagbar'
Plug 'fatih/vim-go'

" Show identation levels
Plug 'Yggdroot/indentLine'

" Misc
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tomtom/tcomment_vim'

filetype plugin indent on

" Indent Guides {
    set ts=2 sw=2 et
" }

" BuffKill {
    nnoremap <leader>q :call CloseSplitOrDeleteBuffer()<CR>
" }

" VimAirline {
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
" }

" Tagbar {
    nnoremap <Leader>t :TagbarToggle<cr>
" }

" Syntastic {
    let g:syntastic_javascript_checkers = ['eslint']
    let g:jsx_ext_required = 0
" }

" NERDTree {
    " For toggling
    noremap <Leader>n :NERDTreeToggle<cr>
    " For refreshing current file and showing current dir
    noremap <Leader>j :NERDTreeFind<cr>
    let g:NERDTreeDirArrows=0
" }

" CtrlP {
    let g:ctrlp_custom_ignore = '\v[\/](node_modules|build|jspm_packages)|(\.(git|hg|svn))$'
    let g:ctrlp_working_path_mode = 'ra' " set working dir to first folder with .git or folder with file ctrlp was called on
    let g:ctrlp_switch_buffer = 'et'	" jump to a file if it's open already
    let g:ctrlp_mruf_max=450 		" number of recently opened files
    let g:ctrlp_max_files=0  		" do not limit the number of searchable files
" }

" Vim Golang {
    let g:go_fmt_command = "goimports"
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    au FileType go nmap <leader>r <Plug>(go-run)
    au FileType go nmap <leader>b <Plug>(go-build)
    au FileType go nmap <leader>t <Plug>(go-test)
    au FileType go nmap <leader>c <Plug>(go-coverage)
    au FileType go nmap <Leader>ds <Plug>(go-def-split)
    au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
    au FileType go nmap <Leader>dt <Plug>(go-def-tab)
    au FileType go nmap <Leader>gd <Plug>(go-doc)
    au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
    au FileType go nmap <Leader>s <Plug>(go-implements)
    au FileType go nmap <Leader>i <Plug>(go-info)
    au FileType go nmap <Leader>e <Plug>(go-rename)
" }

" identline {
    " Don't show identation levels for json files as there is a bug
    let g:indentLine_fileTypeExclude = ['json']
" }

" tcomment {
    " Turn off leader key shortcuts
    let g:tcommentMapLeader2 = ''
" }

" surround {
    let g:surround_indent = 0
" }

" OS Specific settings
if filereadable(expand("~/.vimrc.bundles.oss"))
  source ~/.vimrc.bundles.oss
endif

" Local settings
if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

" Color Schema {
    let base16colorspace=256
    colorscheme base16-eighties
" }
