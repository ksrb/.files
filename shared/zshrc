# WSL {
    # From: https://stackoverflow.com/a/61036356
    if [[ -n "$WSL_DISTRO_NAME" ]]; then
      export isWSL=true
    fi

    # From: https://github.com/ohmyzsh/ohmyzsh/blob/2d40b562e5da4c885babc1f7f09aa33a8a891eb2/lib/compfix.zsh#L39-L41
    if [[ "$isWSL" = true ]]; then
      ZSH_DISABLE_COMPFIX=true
    fi
# }

# General {
    # Location of oh-my-zsh files
    export ZSH="$HOME/.oh-my-zsh"

    # Theme
    ZSH_THEME="robbyrussell"

    plugins=(git git-extras docker)

    # Initialize oh-my-zsh
    source "$ZSH"/oh-my-zsh.sh

    # Base16 Shell from https://github.com/chriskempson/base16-shell
    BASE16_SHELL="$HOME/.config/base16-shell/"
    [ -n "$PS1" ] && \
      [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
      eval "$("$BASE16_SHELL/profile_helper.sh")"

    # Add relative bin to PATH
    dotBin=./bin
    [[ ":$PATH:" != *"$dotBin"* ]] && PATH="$dotBin:${PATH}"

    # Add relative node_modules/.bin to PATH
    dotNodeModuleBin=./node_modules/.bin
    [[ ":$PATH:" != *"$dotNodeModuleBin"* ]] && PATH="$dotNodeModuleBin:${PATH}"

    # Disable ctrl-s and ctrl-q http://unix.stackexchange.com/a/72092
    stty -ixon
# }

# Functions {
    # Get dangling commits
    # See post for single quote escaping method: https://stackoverflow.com/a/1250279
    gitkfsck() {
      gitk --all "$(git fsck --no-reflog | awk '/dangling commit/ {print $3}')"
    }

    # Convert files recursively to have windows (CRLF) Line Endings
    crlfle() {
      local pathVar
      pathVar=${1:-$(pwd)}


      # Is a directory
      if [[ -d $pathVar ]]; then
        # Not the same directory ($(pwd) or '.')
        if [[ ! "$pathVar" -ef $(pwd) ]]; then
          pushd "$pathVar" 1> /dev/null || exit
        fi
        rg . \
          --null \
          --files \
          | xargs -0 unix2dos
        if [[ ! "$pathVar" -ef $(pwd) ]]; then
          popd 1> /dev/null || exit
        fi
      else # Not a directory
        unix2dos "$pathVar"
      fi
    }

    # Convert files recursively to have linux/mac (LF) Line Ending
    lfle() {
      local pathVar
      pathVar=${1:-$(pwd)}


      if [[ -d $pathVar ]]; then
        if [[ ! "$pathVar" -ef $(pwd) ]]; then
          pushd "$pathVar" 1> /dev/null || exit
        fi
        rg . \
          --null \
          --files \
          | xargs -0 dos2unix
        if [[ ! "$pathVar" -ef $(pwd) ]]; then
          popd 1> /dev/null || exit
        fi
      else
        dos2unix "$pathVar"
      fi
    }

    # Directory shortcuts
    programmingDir=$HOME/Documents/Programming
    prog() { cd "$programmingDir/$1" || return; }
    compctl -W "$programmingDir" -/ prog

    # Print Path in human readable format
    ppath() {
      echo -e "${PATH//:/\\n}"
    }

    # Kill Process(es) On Port
    killpop () {
      for port in "$@"; do
        if [[ ! $(lsof -i ":$port") ]]; then
          printf "No process found on port: %s\n" "$port"
          continue
        fi

        printf "Killing process on port: %s\n" "$port"
        lsof -ti ":$port" | xargs kill -9

        if [[ ! $(lsof -i ":$port") ]]; then
          printf "Killed process on port: %s\n" "$port"
        fi
      done
    }

    alias rgf='rg --files | rg'
# }

# Emacs {
    # Allow emacs to use Shift + tab in term mode when showing completion list
    bindkey '^[[Z' reverse-menu-complete
# }

# OS specific settings
[[ -s "$HOME/.zshrc.oss" ]] && source "$HOME/.zshrc.oss"

# Local settings
[[ -s "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"
