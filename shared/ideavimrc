" Settings {
    set clipboard+=ideaput  " Use IntelliJ to put lines (will auto-import dependencies based on what was copied)
    set hlsearch            " Highlight searched
    set ic                  " Case insensitive search
    set ideajoin            " Use IntelliJ to join lines (<C-j>)
    set incsearch           " Progressive highlighting while searching
    set noerrorbells        " Disable system beep see https://superuser.com/a/677312
    set number              " Show line numbers
    set relativenumber      " Show line numbers relative to cursor
    set smartcase           " Only do case sensitive searching when there is a capitalized letter
    set visualbell          " Disable system beep see https://superuser.com/a/677312
" }

" For reference of available actions
" See: https://github.com/JetBrains/intellij-community/blob/master/platform/platform-resources-en/src/messages/ActionsBundle.properties
" Or use :actionlist [pattern]
" See: https://github.com/JetBrains/ideavim#executing-ide-actions

" Bindings {
    let mapleader = " "

    " Visual star select yanking text to v register and pasting into search
    " See: https://youtrack.jetbrains.com/issue/VIM-2089
    vnoremap * "vy <Esc>/<C-r>v<CR>

    " Shift window up oneline
    " See: https://youtrack.jetbrains.com/issue/VIM-2737/cc-causes-a-one-line-scroll
    nnoremap cc <C-y>cc

    " tcomment like comment command
    nmap gcc <Action>(CommentByLineComment)

    " Wrap to line width
    nmap gqq <Action>(com.andrewbrookins.idea.wrap.WrapAction)

    " Show hover
    " Action will be available in 2023.3
    " See: https://youtrack.jetbrains.com/issue/VIM-2106
    " nmap gh <Action>(ShowHoverInfo)
    nmap gh <Action>(ShowErrorDescription)

    " Ctrl + hjkl to switch splits
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-h> <C-w>h
    nnoremap <C-l> <C-w>l

    " Projectile switch project emulation
    nmap <C-c>pp <Action>(ManageRecentProjects)

    " Ctrlp emulation
    nmap <C-p> <Action>(GotoFile)
    vnoremap <C-p> <Action>(GotoFile)

    " Emulate window move behavior
    nmap <C-w>L <Action>(MoveEditorToOppositeTabGroup)
    nmap <C-w>H <Action>(MoveEditorToOppositeTabGroup)
    nmap <C-w>D <Action>(OpenEditorInOppositeTabGroup)

    " Re-enable IntelliJ binding
    nmap <C-S-c> <Action>(CopyAbsolutePath)

    " Leader
    " Delete into blackhole register and paste
    nmap <Leader>dp "_dP

    nmap <Leader>y "+y
    nmap <Leader>p "+p

    " TODO: Using nnoremap for Leader bindings is failing
    nmap <Leader><C-e> <Action>(RecentFiles)
    nmap <Leader><C-f> <Action>(Replace)
    nmap <Leader><C-g> <Action>(FindUsages)
    nmap <Leader><C-h> <Action>(FindInPath)
    nmap <Leader><C-r> <Action>(ReplaceInPath)
    nmap <Leader><C-t> <Action>(GotoImplementation)
    nmap <Leader>[{ <Action>(EditorCodeBlockStart)
    nmap <Leader>]} <Action>(EditorCodeBlockEnd)
    nmap <Leader>ch <Action>(CloseAllToTheLeft)
    nmap <Leader>cl <Action>(CloseAllToTheRight)
    nmap <Leader>co <Action>(CloseAllEditorsButActive)
    nmap <Leader>ct <Action>(CloseAllEditors)
    nmap <Leader>df <Action>(ToggleDistractionFreeMode)
    nmap <Leader>n <Action>(ActivateProjectToolWindow)
    nmap <Leader>r <Action>(SynchronizeCurrentFile)
    nmap <Leader>rl <Action>(GotoRelated)
    " Works but substitues character under cursor
    nmap <Leader>s <Action>(SynchronizeCurrentFile)
    nmap <Leader>sa <Action>(Synchronize)
    nmap <Leader>t <Action>(ActivateStructureToolWindow)
    nmap <Leader>wl <Action>(com).andrewbrookins.idea.wrap.WrapAction
    nmap <Leader>wp <Action>(com).andrewbrookins.idea.wrap.WrapParagraphAction
" }

" Emulated plugins {
   set surround         " vim-surround emulation
   set matchit          " matchit emulation
   set highlightedyank  " Highlight yanked area

   let g:highlightedyank_highlight_color = "rgba(250, 240, 170, 123)"
" }
